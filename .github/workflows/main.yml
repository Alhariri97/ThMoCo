# name: build-and-deploy-web-app

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

# env:
#   DOTNET_VERSION: 8.0.x
#   BUILD_CONFIGURATION: Release
#   PROJECT_PATH: ./ThMoCo.Api
#   PUBLISH_PATH: ./myapp
#   TESTRESULTS_PATH: ./ThMoCo.Tests
#   AZURE_WEBAPP_NAME: thamcodevah-app

# jobs:
#   build:
#     runs-on: ubuntu-22.04
#     steps:
#       - uses: actions/checkout@v3
#       - name: Install dotnet
#         uses: actions/setup-dotnet@v3
#         with:
#           dotnet-version: ${{ env.DOTNET_VERSION }}
#       - name: Install dependencies
#         run: dotnet restore
#       - name: Build code
#         run: |
#           dotnet build \
#             --configuration $BUILD_CONFIGURATION \
#             --no-restore
#       - name: Run unit tests
#         run: |
#           dotnet test \
#             --configuration $BUILD_CONFIGURATION \
#             --no-build \
#             --logger trx \
#             --results-directory $TESTRESULTS_PATH
#       - name: Store test results
#         uses: actions/upload-artifact@v4
#         with:
#           name: test-results
#           path: ${{ env.TESTRESULTS_PATH }}
#         if: ${{ always() }}
#       - name: Package build
#         run: |
#           dotnet publish $PROJECT_PATH \
#             --configuration $BUILD_CONFIGURATION \
#             --no-build \
#             --output $PUBLISH_PATH
#       - name: Debug artifact path
#         run: ls -R ${{ env.PUBLISH_PATH }}
#       - name: Store build artefact
#         uses: actions/upload-artifact@v4
#         with:
#           name: build
#           path: ${{ env.PUBLISH_PATH }}

#   deploy-to-azure:
#     runs-on: ubuntu-22.04
#     needs: build
#     steps:
#       - uses: azure/login@v2
#         with:
#           creds: ${{ secrets.AZURE_CREDENTIALS }}
#       - name: Azure CLI script
#         uses: azure/cli@v2
#         with:
#           azcliversion: latest
#           inlineScript: |
#             az account show
#       - uses: actions/download-artifact@v4 
#         with:
#           name: build
#           path: ${{ env.PUBLISH_PATH }}
#       - name: Deploy to Azure Web App
#         id: deploy-to-webapp
#         uses: azure/webapps-deploy@v2
#         with:
#           app-name: ${{ env.AZURE_WEBAPP_NAME }}
#           publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
#           package: ${{ env.PUBLISH_PATH }}

##########################################################################

# name: build
# on:
#   push:
#     branches:
#       - main  # Trigger the workflow only on push to main
# env:
#   DOTNET_VERSION: 6.0.x
#   BUILD_CONFIGURATION: Release
#   PROJECT_PATH: ./ThMoCo.Api         # set this to the directory path of your project
#   PUBLISH_PATH: ./myapp
#   TESTRESULTS_PATH: ./ThMoCo.Tests
#   AZURE_WEBAPP_NAME: ThAmCoWebAppApi  # set this to your Azure's app name
# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v3
#       - name: Install dotnet
#         uses: actions/setup-dotnet@v3
#         with:
#           dotnet-version: ${{ env.DOTNET_VERSION }}
#       - name: Install dependencies
#         run: dotnet restore
#       - name: Build code
#         run: |
#           dotnet build \
#             --configuration $BUILD_CONFIGURATION \
#             --no-restore
#       - name: Run unit tests
#         run: |
#           dotnet test \
#             --configuration $BUILD_CONFIGURATION \
#             --no-build \
#             --logger trx \
#             --results-directory $TESTRESULTS_PATH
#       - name: Store test results
#         uses: actions/upload-artifact@v3
#         with:
#           name: test-results
#           path: ${{ env.TESTRESULTS_PATH }}
#         if: ${{ always() }} # ensures test results uploaded even after failure
#       - name: Package build
#         run: |
#           dotnet publish $PROJECT_PATH \
#             --configuration $BUILD_CONFIGURATION \
#             --no-build \
#             --output $PUBLISH_PATH
#       - name: Store build artefact
#         uses: actions/upload-artifact@v3
#         with:
#           name: build
#           path: ${{ env.PUBLISH_PATH }}
#   deploy-test:
#     runs-on: ubuntu-latest
#     needs: build
# #   environment:
# #     name: 'production'
# #     url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
# #   if: github.ref == 'refs/heads/master'
#     steps:
#       - uses: azure/login@v2
#         with:
#           creds: ${{ secrets.AZURESECRET }}
#       - name: Azure CLI script
#         uses: azure/cli@v2
#         with:
#           azcliversion: latest
#           inlineScript: |
#             az account show
#       - uses: actions/download-artifact@v3
#         with:
#           name: build
#           path: ${{ env.PUBLISH_PATH }}
#       - name: Deploy to Azure Web App
#         id: deploy-to-webapp
#         uses: azure/webapps-deploy@v2
#         with: 
#           app-name: ${{ env.AZURE_WEBAPP_NAME }}
#           publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE  }} # Define secret in GitHub with contents of Publish Profile
#           package: ${{ env.PUBLISH_PATH }}

name: Deploy to Azure

on:
  push:
    branches:
      - main  # Trigger deployment on push to the main branch
  pull_request:
    branches:
      - main  # Trigger deployment on PR to main branch

env:
  DOTNET_VERSION: 8.0.x
  BUILD_CONFIGURATION: Release
  PROJECT_PATH: ./ThMoCo.Api
  PUBLISH_PATH: ./myapp
  TESTRESULTS_PATH: ./ThMoCo.Tests
  AZURE_WEBAPP_NAME: thamcodevah-app


jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2
      
      # Step 2: Set up .NET
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'  # Specify the .NET version you're using (8.0 in your case)

      # Step 3: Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Step 4: Build the project
      - name: Build project
        run: dotnet build --configuration Release

      # Step 5: Publish the project
      - name: Publish project
        run: dotnet publish --configuration Release --output ./publish

      # Step 6: Login to Azure using the credentials from AZURESECRET
      - name: 'Azure Login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURESECRET }}

      # Step 7: Deploy to Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: "${{ env.AZURE_WEBAPP_NAME }}"  # The name of your Azure App Service
          slot-name: "production"  # Optionally specify a slot (e.g., staging, production)
          package: './publish'  # Path to the folder generated by `dotnet publish`

      # Optional: Clean up (remove the publish directory)
      - name: Clean up
        run: rm -rf ./publish
