# Workflow name displayed in GitHub Actions
name: build-and-deploy-web-app

# Trigger the workflow on push to the 'main' branch
on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering of the workflow from GitHub UI

# Define environment variables that will be used across jobs
env:
  DOTNET_VERSION: 8.0.x
  BUILD_CONFIGURATION: Release
  PROJECT_PATH: ./ThMoCo.Api
  PUBLISH_PATH: ./myapp
  TESTRESULTS_PATH: ./ThMoCo.Tests
  AZURE_WEBAPP_NAME: thamcodevah-app
  AZURE_RG_Name: thamco-devah-rg

jobs:
    # Job to build the .NET application
  build:
    runs-on: ubuntu-22.04
    steps:
        # Step 1: Checkout the repository code
      - uses: actions/checkout@v3
        # Step 2: Install .NET SDK

      - name: Install dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
        # Step 3: Restore dependencies
      - name: Install dependencies
        run: dotnet restore
        # Step 4: Build the project
      - name: Build code
        run: |
          dotnet build \
            --configuration $BUILD_CONFIGURATION \
            --no-restore
    
        # Step 5: Run unit tests
      - name: Run unit tests
        run: |
          dotnet test \
            --configuration $BUILD_CONFIGURATION \
            --no-build \
            --logger trx \
            --results-directory $TESTRESULTS_PATH
      - name: Store test results
        uses: actions/upload-artifact@v4
        with:

          # Step 6: Upload test results as artifacts
          name: test-results
          path: ${{ env.TESTRESULTS_PATH }}
        if: ${{ always() }}
          # Step 7: Package the build output
      - name: Package build
        run: |
          dotnet publish $PROJECT_PATH \
            --configuration $BUILD_CONFIGURATION \
            --no-build \
            --output $PUBLISH_PATH
      
        # Step 8: Debugging - List the contents of the publish folder
      - name: Debug artifact path
        run: ls -R ${{ env.PUBLISH_PATH }}
  
       # Step 9: Upload build output as artifacts for deployment
      - name: Store build artefact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ${{ env.PUBLISH_PATH }}


  # Job to deploy the application to Azure Web App
  deploy-to-azure:
    runs-on: ubuntu-22.04
    needs: build # Ensure the build job runs before this one
    steps:
          # Step 1: Login to Azure using the Service Principal credentials
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      #   # Step 2: (Optional) Run an Azure CLI script to verify the account
      # - name: Azure CLI script
      #   uses: azure/cli@v2
      #   with:
      #     azcliversion: latest
      #     inlineScript: |
      #       az account show

          # Step 3: Download the build artifact from the previous job
      - uses: actions/download-artifact@v4 
        with:
          name: build
          path: ${{ env.PUBLISH_PATH }}

          # Step 4: Deploy the web app to Azure Web App
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.PUBLISH_PATH }}

          # Step 5: Set environment variables in the Azure Web App
      - name: Set Environment Variables
        run: |
          az webapp config appsettings set \
              --name ${{ env.AZURE_WEBAPP_NAME }} \
              --resource-group ${{env.AZURE_RG_Name}} \
              --settings "ConnectionStrings:ConnectionString= ${{secrets.DB_CONNECTION_STRING}}" 
###################################################
