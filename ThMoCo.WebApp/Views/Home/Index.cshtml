@model IEnumerable<ThMoCo.WebApp.Models.ProductDTO>

@{
    ViewData["Title"] = "Products";
        // Example: retrieve categories from ViewBag
    // Ensure your controller sets ViewBag.Categories to a List<string> or similar
    var categories = ViewBag.Categories as List<string> ?? new List<string>();

    // Keep the previously selected category if it was submitted
    var currentCategory = ViewContext.HttpContext.Request.Query["category"].ToString();

}

<h2 class="display-4">Products</h2>

<!-- Search Form -->
<form method="get" class="mb-3">
    <!-- Search Field -->
    <div class="input-group mb-2">
        <span class="input-group-text">Search</span>
        <input type="text"
               class="form-control"
               name="search"
               placeholder="Search products..."
               value="@ViewContext.HttpContext.Request.Query["search"]" />
               <button type="submit" class="btn btn-primary">Search</button>

    </div>
    
    <!-- Category Field -->
    <div class="input-group mb-2">
        <label class="input-group-text" for="categorySelect">Category</label>
        <select class="form-select" id="categorySelect" name="category">
            <option value="">All Categories</option>
            @foreach (var cat in categories)
            {
                var selected = (cat == currentCategory) ? "selected" : "";
                @if (cat == currentCategory)
                {
                    <option value="@cat" selected>@cat</option>
                }
                else
                {
                    <option value="@cat">@cat</option>
                }
            }
        </select>
                <span class="input-group-text">Min Price</span>
        <input type="number"
               class="form-control"
               name="minPrice"
               placeholder="0"
               min="10"
               step="10.0"
               value="@ViewContext.HttpContext.Request.Query["minPrice"]" />

        <span class="input-group-text">Max Price</span>
        <input type="number"
               class="form-control"
               name="maxPrice"
               placeholder="9999"
               min="10"
               step="10.0"
               value="@ViewContext.HttpContext.Request.Query["maxPrice"]" />

    </div>

</form>




<!-- Products Table -->
@if (!Model.Any())
{
    <div class="alert alert-warning text-center">
        No products found.
    </div>
}
else
{
    <!-- 
        Bootstrap grid classes: 
        - "row row-cols-1 row-cols-md-2 row-cols-lg-3" creates responsive columns
        - "g-4" adds spacing between columns
    -->
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var product in Model)
        {
            <div class="col">
                <div class="card h-100">
                    <!-- Product Image -->
                    @if (!string.IsNullOrEmpty(product.ImageUrl))
                    {
                        <img src="@product.ImageUrl" alt="@product.Name" class="card-img-top" />
                    }
                    else
                    {
                        <!-- Fallback image or placeholder -->
                        <img src="https://via.placeholder.com/150" alt="No Image" class="card-img-top" />
                    }

                    <div class="card-body">
                        <!-- Product Name -->
                        <h5 class="card-title">@product.Name</h5>

                        <!-- Product Description -->
                        <p class="card-text">
                            @product.Description
                        </p>

                        <!-- Pricing, Category, etc. -->
                        <p class="card-text">
                            <strong>Price:</strong> @product.Price.ToString("C")<br />
                            <strong>Category:</strong> @product.Category
                        </p>

                        <!-- Availability & Stock -->
                        <p>
                            <strong>Availability:</strong>
                            @if (product.IsAvailable)
                            {
                                <span class="text-success">Available</span>
                            }
                            else
                            {
                                <span class="text-danger">Out of Stock</span>
                            }
                            <br />
                            <strong>Stock:</strong> @product.StockQuantity
                        </p>
                    </div>

                    <!-- Card Footer (optional) -->
                    <div class="card-footer">
                        Supplier: @(product.Supplier ?? "Unknown")
                    </div>
                </div>
            </div>
        }
    </div>
}
